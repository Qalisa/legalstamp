---
import type { GroupResult } from 'helpers/groupBySuccessive';
import { sanitizePath } from 'helpers/sanitize';
import type { ui } from 'i18n/ui';
import { getLangFromUrl, useTranslations } from 'i18n/utils';

const lang = getLangFromUrl(Astro.url);
const t = useTranslations(lang);

interface Props {
  filter?: string[]
  groupByResult?: GroupResult<unknown>
  originPathnameAgnostic?: boolean
  defaultPath: string
  i18nPropertyName: keyof typeof ui.en
  descriptioni18nPropertyName: string
  formatter?: (input: string) => string | undefined
}
const { defaultPath, descriptioni18nPropertyName, filter, formatter, groupByResult, i18nPropertyName, originPathnameAgnostic } = Astro.props

const base = originPathnameAgnostic 
  ? defaultPath 
  : sanitizePath(Astro.originPathname);
const elems = (filter ?? (groupByResult ? Object.keys(groupByResult): []))

const description = t('pathDescr')[descriptioni18nPropertyName] ?? descriptioni18nPropertyName
---
<h3 class="oap">{
    !originPathnameAgnostic ? 
      description 
      : <a href={base}>{description}</a>
  }</h3>
<ul>
{ elems.reverse().map(i => (
  <li>
    <a href={[base, i].join("/")}>{
      t(i18nPropertyName)[i] ?? formatter?.(i) ?? i
    }</a>
  </li>
)) }
</ul>

<style>
  h3.oap {
    margin-bottom: 0;
  }
</style>