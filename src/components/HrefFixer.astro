---
// Standardize href="." behavior regarding trailing path
---
<script>
    //
    function docReady(fn: () => void) {
        // see if DOM is already available
        if (document.readyState === "complete" || document.readyState === "interactive") {
            // call on next available tick
            setTimeout(fn, 1);
        } else {
            document.addEventListener("DOMContentLoaded", fn);
        }
    }   

    //
    function doFixupOnLinks() {
        const { href } = location
        const wantsFixup = document.getElementsByClassName('fixup')
        for (const e of wantsFixup) {
            //
            let hrefOnAttr = e.getAttribute('href')
            if (!hrefOnAttr) continue

            //
            const cmd = "./#" as const
            const valid = hrefOnAttr.startsWith(cmd)
            if (!valid) continue

            //
            hrefOnAttr = hrefOnAttr.slice(cmd.length)

            //
            const endsWithSlash = href.endsWith('/')
            let newHref = ''
            switch(hrefOnAttr.slice(0, 1)) {
                // back 1 path seg
                case "-": {
                    newHref = endsWithSlash ? '..' : '.'
                }
                break;

                // switch path seg
                case "|": {
                    const latest = new URL(href).pathname.split('/').filter(Boolean).reverse()[0]
                    const where = hrefOnAttr.slice(1)
                    newHref = endsWithSlash ? where : [latest, where].join('/')
                }
                break;
            }

            // 
            e.setAttribute('href', newHref)
        }
    }

    //
    docReady(() => {
        doFixupOnLinks()
    })

</script>