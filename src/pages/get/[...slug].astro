---
import { render } from "astro:content";
import { getEntry } from "astro:content";
import { availableFormatsConfig, defaultDocFormat, productOrOrgFirst } from "helpers/legalstamp.groupedBy";
import { generateStaticPaths } from "helpers/static";
import LeanLayout from "layouts/LeanLayout.astro";

//
const allowedOrigins = import.meta.env.CORS_ALLOW_ORIGIN.split(',').filter(Boolean).map(domain => "https://" + domain);

export async function getStaticPaths() {
    return generateStaticPaths(productOrOrgFirst.grouping, { onlyTags: true, squeezeTagParam: false })
}

const { documentType, format, lang, productOrOrganization, tag } = Astro.props;

//
const entry = await getEntry('legalstamped', [documentType, productOrOrganization, lang, tag].join('/'))
if (!entry) {
  throw new Error('Could not find document');
} else if (entry.rendered?.html == '') {
    throw new Error('Document exist, but is empty');
}

//
const defaultedFormat = format ?? defaultDocFormat

switch (defaultedFormat) {
    //
    case "markdown": {
        //
        const requester = Astro.request.headers.get('Origin') ?? ''
        const isCORSRequest = requester != ''
        const isRequesterWhitelisted = allowedOrigins.includes(requester)
        const OK = !isCORSRequest || isRequesterWhitelisted

        //
        return new Response(
            OK 
                ? entry.body 
                : "Requester not whitelisted. Should be either " + allowedOrigins.join(''), 
            {
                headers: {
                    "Access-Control-Allow-Headers": "Content-Type",
                    "Access-Control-Allow-Methods": "GET, OPTIONS",
                    "Access-Control-Allow-Origin": isRequesterWhitelisted ? requester : 'null',
                    "Content-Type": availableFormatsConfig[defaultedFormat].contentType,
                },
                status: OK ? 200 : 401
            }
        )
    }

    // classic rendering
    default: {}
}

const { Content } = await render(entry);

---
<LeanLayout isEnhanced={defaultedFormat == 'enhanced'}>
    <Content />
    <Fragment slot="links">
        {[
            ["Markdown #️⃣", availableFormatsConfig.markdown.name], 
            ["HTML 🌏", availableFormatsConfig.html.name]
        ].map(([linkName, format])=>         
            (<a href={"./" + tag + "/" + format}>{linkName}</a>)
          )
        }
    </Fragment>
    <Fragment slot="back">
        <a class="back" href={"./."}>{"<"} Back</a>
    </Fragment>
</LeanLayout>
<style>
    .back {
		position:absolute;
		padding-left: 1rem;
		padding-top: .25rem;
		font-size: .75rem;
	}
</style>