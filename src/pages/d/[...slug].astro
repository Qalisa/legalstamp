---
import Lang from 'components/ListBy/Lang.astro';
import ProductOrOrganization from 'components/ListBy/ProductOrOrganization.astro';
import Tags from 'components/ListBy/Tags.astro';
import { renderingDeadEnd } from 'helpers/error';
import { successiveFilterByValues } from 'helpers/groupBySuccessive';
import { defaultDocFormatConfig, docFirst } from 'helpers/legalstamp.groupedBy';
import { generateStaticPaths } from 'helpers/static';
import Layout from 'layouts/Layout.astro';

export async function getStaticPaths() {
    return generateStaticPaths(docFirst.grouping)
}

const { documentType, format, lang, productOrOrganization, tag } = Astro.props;

//
const filtered = successiveFilterByValues(docFirst.data, [
    documentType, 
    productOrOrganization, 
    lang, 
    ["meta.tag", tag], 
    ["meta.format", defaultDocFormatConfig.name]
])

//
const isFilteredArray = Array.isArray(filtered)
const toDisplay = 
    ((tag && isFilteredArray) && filtered[0]) || 
    (lang && isFilteredArray) && filtered.map(e => e.meta.tag) ||
    (!isFilteredArray && Object.keys(filtered)) ||
    []

//
if (!Array.isArray(toDisplay)) {
    return Astro.rewrite(["get", productOrOrganization, documentType, lang, tag, format].filter(Boolean).join('/'))
}
---
{
    (productOrOrganization == null && <Layout><ProductOrOrganization productsOrOrgs={toDisplay} /></Layout>) ||
    (lang == null && <Layout><Lang langs={toDisplay} /></Layout>) ||
    (tag == null && <Layout><Tags tags={toDisplay} /></Layout>) ||
    renderingDeadEnd()
}
