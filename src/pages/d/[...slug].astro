---
import Lang from 'components/ListBy/Lang.astro';
import ProductOrOrganization from 'components/ListBy/ProductOrOrganization.astro';
import Tags from 'components/ListBy/Tags.astro';
import ShowDoc from 'components/ShowDoc.astro';
import { successiveFilterByValues } from 'helpers/groupBySuccessive';
import { all, docFirst, type Meta, type Nullable } from 'helpers/legalstamp.groupedBy';
import Layout from 'layouts/Layout.astro';
import LeanLayout from 'layouts/LeanLayout.astro';

export async function getStaticPaths() {
    //
    const one = all.map(e => {
        return {
            slug: e.meta.documentType,
            documentType: e.meta.documentType,
            productOrOrganization: null,
            lang: null,
            tag: null
        } satisfies { slug: string } & Nullable<Meta>
    })

    //
    const two = all.map(e => {
        return {
            slug: [e.meta.documentType, e.meta.productOrOrganization].join('/'),
            documentType: e.meta.documentType,
            productOrOrganization: e.meta.productOrOrganization,
            lang: null,
            tag: null
        } satisfies { slug: string } & Nullable<Meta>
    })

    //
    const three = all.map(e => {
        return {
            slug: [e.meta.documentType, e.meta.productOrOrganization, e.meta.lang,].join('/'),
            documentType: e.meta.documentType,
            productOrOrganization: e.meta.productOrOrganization,
            lang: e.meta.lang,
            tag: null
        } satisfies { slug: string } & Nullable<Meta>
    })

    //
    const four = all.map(e => {
        return {
            slug: [e.meta.documentType, e.meta.productOrOrganization, e.meta.lang, e.meta.tag].join('/'),
            documentType: e.meta.documentType,
            productOrOrganization: e.meta.productOrOrganization,
            lang: e.meta.lang,
            tag: e.meta.tag
        } as { slug: string } & Nullable<Meta>
    })


  return four.concat(three, two, one).map(({ slug, documentType, lang, productOrOrganization, tag }) => {
    return {
      params: { slug },
      props: { documentType, productOrOrganization, lang, tag },
    };
  });
}

const { documentType, productOrOrganization, lang, tag } = Astro.props;

//
const filtered = successiveFilterByValues(docFirst, [documentType, productOrOrganization, lang, ["meta.tag", tag]])
const isFilteredArray = Array.isArray(filtered)
const toDisplay = 
    ((tag && isFilteredArray) && filtered[0]) || 
    (lang && isFilteredArray) && filtered.map(e => e.meta.tag) ||
    (!isFilteredArray && Object.keys(filtered)) ||
    []

//
const docToDisplay = !Array.isArray(toDisplay)
---
{ docToDisplay && <LeanLayout><ShowDoc doc={toDisplay} /></LeanLayout>}
{ !docToDisplay && (
    (productOrOrganization == null && <Layout><ProductOrOrganization productsOrOrgs={toDisplay} /></Layout>) ||
    (lang == null && <Layout><Lang langs={toDisplay} /></Layout>) ||
    (tag == null && <Layout><Tags tags={toDisplay} /></Layout>)
)}
