---
import DocumentType from 'components/ListBy/DocumentType.astro';
import ProductOrOrganization from 'components/ListBy/ProductOrOrganization.astro';
import Tags from 'components/ListBy/Tags.astro';
import ShowDoc from 'components/ShowDoc.astro';
import { successiveFilterByValues } from 'helpers/groupBySuccessive';
import { langFirst } from 'helpers/legalstamp.groupedBy';
import { generateStaticPaths } from 'helpers/static';
import Layout from 'layouts/Layout.astro';
import LeanLayout from 'layouts/LeanLayout.astro';

export async function getStaticPaths() {
    return generateStaticPaths(langFirst.grouping)
}

const { documentType, productOrOrganization, lang, tag } = Astro.props;

//
const filtered = successiveFilterByValues(langFirst.data, [lang, productOrOrganization, documentType, ["meta.tag", tag]])
const isFilteredArray = Array.isArray(filtered)
const toDisplay = 
    ((tag && isFilteredArray) && filtered[0]) || 
    (lang && isFilteredArray) && filtered.map(e => e.meta.tag) ||
    (!isFilteredArray && Object.keys(filtered)) ||
    []

//
const docToDisplay = !Array.isArray(toDisplay)
---
{ docToDisplay && <LeanLayout><ShowDoc doc={toDisplay} /></LeanLayout>}
{ !docToDisplay && (
    (productOrOrganization == null && <Layout><ProductOrOrganization productsOrOrgs={toDisplay} /></Layout>) ||
    (documentType == null && <Layout><DocumentType docTypes={toDisplay} /></Layout>) ||
    (tag == null && <Layout><Tags tags={toDisplay} /></Layout>)
)}
