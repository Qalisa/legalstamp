---
import DocumentType from 'components/ListBy/DocumentType.astro';
import Lang from 'components/ListBy/Lang.astro';
import { renderingDeadEnd } from 'helpers/error';
import { successiveFilterByValues } from 'helpers/groupBySuccessive';
import { defaultDocFormat, productOrOrgFirst } from 'helpers/legalstamp.groupedBy';
import { generateStaticPaths } from 'helpers/static';
import Layout from 'layouts/Layout.astro';

const tag = "latest"

export async function getStaticPaths() {
    return generateStaticPaths(productOrOrgFirst.grouping)
}

const { documentType, format, lang, productOrOrganization } = Astro.props;

//
const filtered = successiveFilterByValues(productOrOrgFirst.data, [productOrOrganization, documentType, lang, ["meta.tag", tag], ["meta.format", defaultDocFormat]])
const isFilteredArray = Array.isArray(filtered)
const toDisplay = 
    (isFilteredArray && filtered[0]) || 
    (lang && isFilteredArray) && filtered.map(e => e.meta.tag) ||
    Object.keys(filtered) ||
    []

//
//
if (!Array.isArray(toDisplay)) {
    return Astro.rewrite(["get", productOrOrganization, documentType, lang, tag, format].filter(Boolean).join('/'))
}

function noLatestDocument() {
    throw new Error('No document marked as "latest" found')
}
---
{
    (documentType == null && <Layout><DocumentType docTypes={toDisplay} /></Layout>) ||
    (lang == null && <Layout><Lang langs={toDisplay} /></Layout>) ||
    (toDisplay.length == 0 && noLatestDocument()) ||
    renderingDeadEnd()
}
